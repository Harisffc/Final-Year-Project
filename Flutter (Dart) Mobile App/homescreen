import 'package:flutter/foundation.dart'; // For kIsWeb
import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:typed_data';
import 'dart:io' show File; // Only used on mobile
import 'package:provider/provider.dart';
import 'package:supabase_flutter/supabase_flutter.dart' as supabase; // Alias for Supabase
import 'points_provider.dart'; // Import the PointsProvider
import 'points_screen.dart'; // Ensure PointsScreen is imported

// HomeScreen displaying tasks and taking photos
class HomeScreen extends StatelessWidget {
  final List<CameraDescription> cameras;

  HomeScreen({Key? key, required this.cameras}) : super(key: key);

  final List<Map<String, dynamic>> tasks = [
    {'title': 'Donate Food', 'points': 50, 'taskType': 'food'},
    {'title': 'Reusable Bag', 'points': 30, 'taskType': 'bags'},
    {'title': 'Eco-Friendly Travel', 'points': 40, 'taskType': 'transport'},
    {'title': 'Save Water', 'points': 35, 'taskType': 'water'},
    {'title': 'Save Energy', 'points': 45, 'taskType': 'energy'},
  ];

  Future<void> _takePhoto(BuildContext context, String taskType, int points) async {
    final picker = ImagePicker();
    final image = await picker.pickImage(source: ImageSource.camera);

    if (image != null) {
      _askQuestion(context, taskType, points, image);
    }
  }

  void _askQuestion(BuildContext context, String taskType, int points, XFile image) async {
    final controller = TextEditingController();
    String question = '';

    switch (taskType) {
      case 'food':
        question = 'Almost how much food have you donated (kg)?';
        break;
      case 'bags':
        question = 'Almost how much plastic have you avoided (bags)?';
        break;
      case 'transport':
        question = 'Almost how much CO2 have you reduced (kg)?';
        break;
      case 'water':
        question = 'Almost how much water have you saved (liters)?';
        break;
      case 'energy':
        question = 'Almost how much energy have you saved (kWh)?';
        break;
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Task Completed!'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // Conditionally display image based on platform
              kIsWeb
                  ? Image.network(image.path)  // For Web, display network image (or replace with actual URL)
                  : Image.file(File(image.path)), // For mobile, use Image.file

              const SizedBox(height: 12),
              Text(question, style: const TextStyle(color: Colors.black)),
              const SizedBox(height: 8),
              TextField(
                controller: controller,
                keyboardType: TextInputType.number,
                decoration: const InputDecoration(hintText: 'Enter amount'),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () async {
              if (controller.text.isNotEmpty) {
                // For Web: Handle the image differently using data or base64 encoding
                if (kIsWeb) {
                  final byteData = await image.readAsBytes();
                  final fileName = '${DateTime.now().millisecondsSinceEpoch}_${image.name}';
                  final response = await supabase.Supabase.instance.client.storage
                      .from('photos') // Your bucket name
                      .uploadBinary(fileName, byteData);

                  if (response.error == null) {
                    Provider.of<PointsProvider>(context, listen: false).addPoints(points);
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Upload successful!')),
                    );

                    // Close the dialog after the upload is successful
                    Navigator.pop(context);
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Error uploading photo: ${response.error?.message}')),
                    );
                  }
                } else {
                  // For mobile: Continue with the standard image upload
                  final file = File(image.path);
                  final fileName = '${DateTime.now().millisecondsSinceEpoch}_${file.uri.pathSegments.last}';
                  final response = await supabase.Supabase.instance.client.storage
                      .from('photos') // Your bucket name
                      .upload(fileName, file);

                  if (response.error == null) {
                    Provider.of<PointsProvider>(context, listen: false).addPoints(points);
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Upload successful!')),
                    );

                    // Close the dialog after the upload is successful
                    Navigator.pop(context);
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Error uploading photo: ${response.error?.message}')),
                    );
                  }
                }
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Please enter a valid amount.')),
                );
              }
            },
            child: const Text('Submit'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        title: const Text('Eco Tasks'),
        backgroundColor: Colors.teal[700],
        actions: [
          IconButton(
            icon: const Icon(Icons.star), // Changed from points to star
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => PointsScreen()),
              );
            },
          ),
        ],
      ),
      body: ListView.builder(
        itemCount: tasks.length,
        itemBuilder: (context, index) {
          var task = tasks[index];
          return TaskCard(
            title: task['title'],
            points: task['points'],
            taskType: task['taskType'],
            onTakePhoto: () => _takePhoto(context, task['taskType'], task['points']),
          );
        },
      ),
    );
  }
}

// TaskCard widget displaying each task
class TaskCard extends StatelessWidget {
  final String title;
  final int points;
  final String taskType;
  final VoidCallback onTakePhoto;

  const TaskCard({
    Key? key,
    required this.title,
    required this.points,
    required this.taskType,
    required this.onTakePhoto,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Text(
              'Points: $points',
              style: const TextStyle(color: Colors.grey),
            ),
            const SizedBox(height: 12),
            ElevatedButton.icon(
              icon: const Icon(Icons.camera_alt),
              label: const Text('Take Photo'),
              onPressed: onTakePhoto,
              style: ElevatedButton.styleFrom(
                foregroundColor: Colors.black,
                backgroundColor: Colors.yellowAccent,
                shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

