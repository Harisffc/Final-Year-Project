import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:camera/camera.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:typed_data';
import 'dart:io' show File;
import 'package:provider/provider.dart';
import 'package:supabase_flutter/supabase_flutter.dart' as supabase;
import 'points_provider.dart';
import 'points_screen.dart';
import 'shop_screen.dart';
import 'sustainability_resources_screen.dart';

class HomeScreen extends StatefulWidget {
  final List<CameraDescription> cameras;

  const HomeScreen({Key? key, required this.cameras}) : super(key: key);

  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _selectedIndex = 0;

  final List<Map<String, dynamic>> tasks = [
    {'title': 'Donate Food', 'points': 50, 'taskType': 'food'},
    {'title': 'Reusable Bag', 'points': 50, 'taskType': 'bags'},
    {'title': 'Eco-Friendly Travel', 'points': 50, 'taskType': 'transport'},
    {'title': 'Save Water', 'points': 50, 'taskType': 'water'},
    {'title': 'Save Energy', 'points': 50, 'taskType': 'energy'},
  ];

  Future<void> _takePhoto(BuildContext context, String taskType, int points) async {
    final picker = ImagePicker();
    final image = await picker.pickImage(source: ImageSource.camera);
    if (image != null) {
      _askQuestion(context, taskType, points, image);
    }
  }

  void _askQuestion(BuildContext context, String taskType, int points, XFile image) async {
    final controller = TextEditingController();
    String question = '';
    double impact = 0.0;

    switch (taskType) {
      case 'food':
        question = 'How much food have you donated (kg)?';
        break;
      case 'bags':
        question = 'How much plastic have you avoided (bags)?';
        break;
      case 'transport':
        question = 'How much have you traveled by bicycle (mile)?';
        break;
      case 'water':
        question = 'How much water have you saved (liters)?';
        break;
      case 'energy':
        question = 'How much energy have you saved (kWh)?';
        break;
    }

    Uint8List? imageBytes;
    if (kIsWeb) {
      imageBytes = await image.readAsBytes();
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Task Completed!'),
        content: SingleChildScrollView(
          child: Column(
            children: [
              kIsWeb ? Image.memory(imageBytes!) : Image.file(File(image.path)),
              const SizedBox(height: 12),
              Text(question, style: const TextStyle(color: Colors.black)),
              const SizedBox(height: 8),
              TextField(
                controller: controller,
                keyboardType: TextInputType.number,
                decoration: const InputDecoration(hintText: 'Enter amount'),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () async {
              if (controller.text.isNotEmpty) {
                final userId = supabase.Supabase.instance.client.auth.currentUser?.id ?? 'unknown_user';
                final inputAmount = double.parse(controller.text);
                impact = _calculateImpact(inputAmount, taskType);

                final fileName = '${DateTime.now().millisecondsSinceEpoch}_${image.name}';

                final response = kIsWeb
                    ? await supabase.Supabase.instance.client.storage
                    .from('photos')
                    .uploadBinary(fileName, await image.readAsBytes())
                    : await supabase.Supabase.instance.client.storage
                    .from('photos')
                    .upload(fileName, File(image.path));

                if (response.error == null) {
                  await Provider.of<PointsProvider>(context, listen: false).addPoints(userId, points);
                  await Provider.of<PointsProvider>(context, listen: false).fetchTotalPoints(userId);

                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Upload successful!')),
                  );
                  Navigator.pop(context);
                  _showImpactDialog(context, impact);
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Upload failed: ${response.error?.message}')),
                  );
                }
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('Please enter a valid amount.')),
                );
              }
            },
            child: const Text('Submit'),
          ),
        ],
      ),
    );
  }

  double _calculateImpact(double amount, String taskType) {
    switch (taskType) {
      case 'food': return amount * 0.03;
      case 'bags': return amount * 0.03;
      case 'transport': return amount * 0.411;
      case 'water': return amount * 0.002;
      case 'energy': return amount * 0.4;
      default: return 0.0;
    }
  }

  void _showImpactDialog(BuildContext context, double impact) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Congratulations! 🌍'),
        content: Text('You saved $impact kg of CO₂!\n\nKeep up the great work!'),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: const Text('Close')),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final screens = [
      _buildTaskList(),
      PointsScreen(),
      ShopScreen(),
      SustainabilityResourcesScreen(),
    ];

    return Scaffold(
      backgroundColor: const Color(0xFF0C7C72),
      appBar: AppBar(
        backgroundColor: Colors.teal[700],
        elevation: 0,
        title: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'SustainiaPlay',
              style: const TextStyle(
                fontFamily: 'RacingSansOne',
                fontSize: 22,
                color: Colors.white,
              ),
            ),
            const SizedBox(width: 10),
            Image.asset(
              'assets/logo.gif',
              height: 32,
              width: 32,
            ),
          ],
        ),
        centerTitle: true,
      ),
      body: screens[_selectedIndex],
      bottomNavigationBar: Container(
        decoration: BoxDecoration(
          color: Colors.grey.withOpacity(0.3),
        ),
        child: BottomNavigationBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          currentIndex: _selectedIndex,
          selectedItemColor: Colors.yellow,
          unselectedItemColor: Colors.grey,
          type: BottomNavigationBarType.fixed,
          onTap: (index) => setState(() => _selectedIndex = index),
          items: const [
            BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
            BottomNavigationBarItem(icon: Icon(Icons.star), label: 'Points'),
            BottomNavigationBarItem(icon: Icon(Icons.shopping_cart), label: 'Shop'),
            BottomNavigationBarItem(icon: Icon(Icons.public), label: 'Resources'),
          ],
        ),
      ),
    );
  }

  Widget _buildTaskList() {
    return ListView.builder(
      itemCount: tasks.length,
      itemBuilder: (context, index) {
        var task = tasks[index];
        return TaskCard(
          title: task['title'],
          points: task['points'],
          taskType: task['taskType'],
          onTakePhoto: () => _takePhoto(context, task['taskType'], task['points']),
        );
      },
    );
  }
}

class TaskCard extends StatelessWidget {
  final String title;
  final int points;
  final String taskType;
  final VoidCallback onTakePhoto;

  const TaskCard({
    Key? key,
    required this.title,
    required this.points,
    required this.taskType,
    required this.onTakePhoto,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    String imagePath = _getImageForTask(taskType);

    return Card(
      margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      color: Colors.grey.withOpacity(0.3),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(title, style: const TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.white)),
                  const SizedBox(height: 8),
                  const Text('Points: 50', style: TextStyle(color: Colors.white70)),
                  const SizedBox(height: 12),
                  ElevatedButton.icon(
                    icon: const Icon(Icons.camera_alt),
                    label: const Text('Take Photo'),
                    onPressed: onTakePhoto,
                    style: ElevatedButton.styleFrom(
                      foregroundColor: Colors.black,
                      backgroundColor: Colors.yellowAccent,
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                    ),
                  ),
                ],
              ),
            ),
            Padding(
              padding: const EdgeInsets.only(left: 16),
              child: Image.asset(imagePath, width: 100, height: 100, fit: BoxFit.cover),
            ),
          ],
        ),
      ),
    );
  }

  String _getImageForTask(String taskType) {
    switch (taskType) {
      case 'food': return 'assets/food_image.png';
      case 'bags': return 'assets/bag_image.png';
      case 'transport': return 'assets/transport_image.png';
      case 'water': return 'assets/water_image.png';
      case 'energy': return 'assets/energy_image.png';
      default: return 'assets/default_image.png';
    }
  }
}


